<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack学习：npm库</title>
      <link href="2021/06/04/webpack4/"/>
      <url>2021/06/04/webpack4/</url>
      
        <content type="html"><![CDATA[<h1 id="npm库之minimist"><a href="#npm库之minimist" class="headerlink" title="npm库之minimist"></a>npm库之minimist</h1><h2 id="1、process"><a href="#1、process" class="headerlink" title="1、process"></a>1、process</h2><p>先来看一下node.js里的process模块：</p><p>process存在于全局对象上，不需要使用require()加载即可使用，process模块主要做两方面的事情：</p><ul><li>获取进程信息（资源使用、运行环境、运行状态）</li><li>执行进程操作（监听事件、调度任务、发出警告）</li></ul><h4 id="环境变量：process-env"><a href="#环境变量：process-env" class="headerlink" title="环境变量：process.env"></a>环境变量：process.env</h4><p>在node服务运行时，经常会判断当前服务运行环境，（生产环境 / 非生产环境）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'生产环境'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'非生产环境'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步：process-nextTick-fn"><a href="#异步：process-nextTick-fn" class="headerlink" title="异步：process.nextTick(fn)"></a>异步：process.nextTick(fn)</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'海贼王'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'火影忍者'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'死神'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出如下</span><span class="token comment">// 海贼王</span><span class="token comment">// 死神</span><span class="token comment">// 火影忍者</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过process.nextTick调度的任务是异步任务，EventLoop是分阶段的，每个阶段执行特定的任务，而nextTick的任务在阶段切换的时候就会执行，因此nextTick会比setTimeout(fn, 0)更快的执行。</p><h4 id="获取命令行参数：process-argv"><a href="#获取命令行参数：process-argv" class="headerlink" title="获取命令行参数：process.argv"></a>获取命令行参数：process.argv</h4><p>process.argv 返回一个数组，数组元素分别如下：</p><ul><li>元素1：node</li><li>元素2：可执行文件的绝对路径</li><li>元素x：其他，比如参数等</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// print process.argv</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'参数'</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行命令 <code>NODE_ENV=dev node argv.js --env production</code>，输出如下。（不包含环境变量）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">参数0: /Users/a/.nvm/versions/node/v6.1.0/bin/node参数1: /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.22-node-process/argv.js参数2: --env参数3: production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 3: chyingp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="当前工作路径：process-cwd-vs-process-chdir-directory"><a href="#当前工作路径：process-cwd-vs-process-chdir-directory" class="headerlink" title="当前工作路径：process.cwd() vs process.chdir(directory)"></a>当前工作路径：process.cwd() vs process.chdir(directory)</h4><ul><li>process.cwd()：返回当前工作路径</li><li>process.chdir(directory)：切换当前工作路径</li></ul><p>工作路径的用途不用过多解释了，直接上代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Starting directory: '</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  process<span class="token punctuation">.</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'/tmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'New directory: '</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'chdir: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Starting directory: /Users/a/Documents/git-code/nodejs-learning-guide/examples/2016.11.22-node-processNew directory: /private/tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、加载环境变量"><a href="#2、加载环境变量" class="headerlink" title="2、加载环境变量"></a>2、加载环境变量</h2><p>我们可以直接在node.js指定命令行参数，再用process.argv读取出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node index.js --beep<span class="token operator">=</span>boop -t -z <span class="token number">12</span> -n5 foo bar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>  <span class="token string">'/usr/local/bin/node'</span>,  <span class="token string">'/Users/blairyue/Desktop/yyz/index.js'</span>,  <span class="token string">'--beep=boop'</span>,  <span class="token string">'-t'</span>,  <span class="token string">'-z'</span>,  <span class="token string">'12'</span>,  <span class="token string">'-n5'</span>,  <span class="token string">'foo'</span>,  <span class="token string">'bar'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述代码中可以看到，<code>process.argv</code> 变量是一个数组，数组前两项分别是 node 程序位置和js脚本位置，数组中随后的元素都是我们启动Node.js后的参数，这些参数以空格分隔成数组。</p><h2 id="3、minimist"><a href="#3、minimist" class="headerlink" title="3、minimist"></a>3、minimist</h2><p>minimist 是一个专门用于处理Node.js启动参数的库，可以将 <code>process.argv</code> 中的参数列表转换成更加易于使用的格式：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'minimist'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; _: [ 'foo', 'bar' ], beep: 'boop', t: true, z: 12, n: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过 minimist 解析的<code>process.argv</code>是一个对象，例如，我们可以直接从访问 <code>argv.beep</code> 得到 <code>--beep=boop</code> 参数的值。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模块 </tag>
            
            <tag> 打包 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习：loader篇</title>
      <link href="2021/05/30/webpack3/"/>
      <url>2021/05/30/webpack3/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack之Loader"><a href="#webpack之Loader" class="headerlink" title="webpack之Loader"></a>webpack之Loader</h1><p>单开一篇记录一下loader！</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p><ul><li>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</li><li>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</li></ul><h4 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的<code>babel-env-preset</code>包和解析JSX的<code>babel-preset-react</code>包）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// npm一次性安装多个依赖模块，模块之间用空格隔开<span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-core babel-loader babel-preset-env babel-preset-react<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>webpack</code>中配置Babel的方法如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    presets<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token string">"react"</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM.</p><p>接下来我们使用ES6的语法，更新<code>Greeter.js</code>并返回一个React组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//Greeter,js</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">'./config.json'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>config<span class="token punctuation">.</span>greetText<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Greeter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>main.js</code>如下，使用ES6的模块定义和渲染Greeter模块</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Greeter <span class="token keyword">from</span> <span class="token string">'./Greeter'</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeter</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再start就可以看到打包后的内容了。</p><h3 id="一切皆模块"><a href="#一切皆模块" class="headerlink" title="一切皆模块"></a>一切皆模块</h3><p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>     rules<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            use<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        loader<span class="token operator">:</span> <span class="token string">"style-loader"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        loader<span class="token operator">:</span> <span class="token string">"css-loader"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意这里对同一个文件引入多个loader的方法。即写在rules里，大括号包裹，逗号隔开。</p></blockquote><p>在app文件夹中新建main.css:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* main.css */</span><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*, *:before, *:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1, h2, h3, h4, h5, h6, p, ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main.js中引入文件 <code>import &#39;./main.css‘</code></p><p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模块 </tag>
            
            <tag> 打包 </tag>
            
            <tag> Loaders </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习：报错篇</title>
      <link href="2021/05/30/webpackproblems/"/>
      <url>2021/05/30/webpackproblems/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack5-：-启动-webpack-dev-server-报错-：-“Cannot-find-module-‘webpack-cli-bin-config-yargs”"><a href="#webpack5-：-启动-webpack-dev-server-报错-：-“Cannot-find-module-‘webpack-cli-bin-config-yargs”" class="headerlink" title="webpack5 ： 启动 webpack-dev-server 报错 ： “Cannot find module ‘webpack-cli/bin/config-yargs”"></a>webpack5 ： 启动 webpack-dev-server 报错 ： “Cannot find module ‘webpack-cli/bin/config-yargs”</h3><p>分析原因：<br>webpack，webpack-cli 以及 webpack-dev-server版本不兼容</p><p>解决方案： 回退版本，等待官方解决兼容性问题再升级webpack<br>亲测回退版本有效</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.43.0"</span><span class="token punctuation">,</span><span class="token string">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^3.3.12"</span><span class="token punctuation">,</span><span class="token string">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^3.11.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="babel报错：-Plugin-Preset-files-are-not-allowed-to-export-objects-only-functions"><a href="#babel报错：-Plugin-Preset-files-are-not-allowed-to-export-objects-only-functions" class="headerlink" title="babel报错： Plugin/Preset files are not allowed to export objects, only functions."></a>babel报错： <strong>Plugin/Preset files are not allowed to export objects, only functions.</strong></h3><p>又又又是版本问题，<strong>原因：babel版本冲突，6和7版本改动较大，存在兼容问题</strong></p><p><strong>解决办法:</strong></p><p>将babel版本全部升级为7，或者将版本全部降到6。</p><p>直接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx babel-upgrade --write<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>还要修改.babelrc文件</strong></p><p>这个文件需要自己在根目录下新建：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>   presets<span class="token operator">:</span> <span class="token punctuation">[</span>'@babel/react'<span class="token punctuation">,</span>'@babel/env'<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模块 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习：功能篇</title>
      <link href="2021/05/30/webpack2/"/>
      <url>2021/05/30/webpack2/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack的强大功能"><a href="#webpack的强大功能" class="headerlink" title="webpack的强大功能"></a>webpack的强大功能</h1><h2 id="1、生成Source-Maps（使调试更容易）"><a href="#1、生成Source-Maps（使调试更容易）" class="headerlink" title="1、生成Source Maps（使调试更容易）"></a>1、生成Source Maps（使调试更容易）</h2><p>开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，<code>Source Maps</code>就是来帮我们解决这个问题的。</p><p>通过简单的配置，<code>webpack</code>就可以在打包时为我们生成的<code>source maps</code>，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p><p>在<code>webpack</code>的配置文件中配置<code>source maps</code>，需要配置<code>devtool</code>，它有以下四种不同的配置选项，各具优缺点，描述如下：</p><table><thead><tr><th>devtool选项</th><th>配置结果</th></tr></thead><tbody><tr><td><code>source-map</code></td><td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的<code>source map</code>，但是它会减慢打包速度；</td></tr><tr><td><code>cheap-module-source-map</code></td><td>在一个单独的文件中生成一个不带列映射的<code>map</code>，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td></tr><tr><td><code>eval-source-map</code></td><td>使用<code>eval</code>打包源文件模块，在同一个文件中生成干净的完整的<code>source map</code>。这个选项可以在不影响构建速度的前提下生成完整的<code>sourcemap</code>，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td></tr><tr><td><code>cheap-module-eval-source-map</code></td><td>这是在打包文件时最快的生成<code>source map</code>的方法，生成的<code>Source Map</code> 会和打包后的<code>JavaScript</code>文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</td></tr></tbody></table><p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p><p>对小到中型的项目中，<code>eval-source-map</code>是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的<code>webpack.config.js</code>，进行如下配置:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devtool<span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span>  __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</p></blockquote><h2 id="2、使用webpack构建本地服务器"><a href="#2、使用webpack构建本地服务器" class="headerlink" title="2、使用webpack构建本地服务器"></a>2、使用webpack构建本地服务器</h2><p><code>Webpack</code>提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以让浏览器监听代码的更改，并自动刷新显示修改后的结果，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-dev-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考<a href="">这里</a></p><table><thead><tr><th>devserver的配置选项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td></tr><tr><td>port</td><td>设置默认监听端口，如果省略，默认为”8080“</td></tr><tr><td>inline</td><td>设置为<code>true</code>，当源文件改变时会自动刷新页面</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为<code>true</code>，所有的跳转将指向index.html</td></tr></tbody></table><p>把配置加到webpack的配置文件中，现在的配置文件<code>webpack.config.js</code>如下所示：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  devtool<span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span>  __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    contentBase<span class="token operator">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span><span class="token comment">//本地服务器所加载的页面所在的目录</span>    historyApiFallback<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//不跳转</span>    inline<span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//实时刷新</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>配置快捷启动</strong></em></p><p>在<code>package.json</code>中的<code>scripts</code>对象中添加如下命令，用以开启本地服务器：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端中输入<code>npm run server</code>即可在本地的<code>8080</code>端口查看结果。（这里由于版本问题会报错，解决方式为回退版本）。</p><h2 id="3、Loaders"><a href="#3、Loaders" class="headerlink" title="3、Loaders"></a>3、Loaders</h2><p><code>Loaders</code>是<code>webpack</code>提供的最激动人心的功能之一了。通过使用不同的<code>loader</code>，<code>webpack</code>有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p><p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置，Loaders的配置包括以下几方面：</p><ul><li><code>test</code>：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</li><li><code>loader</code>：loader的名称（必须）</li><li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li><li><code>query</code>：为loaders提供额外的设置选项（可选）</li></ul><h2 id="4、plugin"><a href="#4、plugin" class="headerlink" title="4、plugin"></a>4、plugin</h2><p><strong>插件</strong>是 webpack 的支柱功能。webpack 自身也是构建于你在 webpack 配置中用到的<strong>相同的插件系统</strong>之上！</p><p>插件目的在于解决<em><strong>loader</strong></em>无法实现的<strong>其他事</strong>：loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模块 </tag>
            
            <tag> 打包 </tag>
            
            <tag> Loaders </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack学习：基础篇</title>
      <link href="2021/05/28/webpack/"/>
      <url>2021/05/28/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="1、webpack是什么"><a href="#1、webpack是什么" class="headerlink" title="1、webpack是什么"></a>1、webpack是什么</h2><p><code>webpack</code> 是一个现代 <code>JavaScript</code> 应用程序的静态模块打包器，当 <code>webpack</code> 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 <code>bundle</code>。</p><p>WebPack可以看做是<strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p><p><em><strong>也就是将各种类型的资源，包括图片、css、js等，转译、组合、拼接、生成 JS 格式的 bundler 文件。</strong></em></p><p>参照官网图：</p><img src="/img/webpack.png" alt="webpack" style="zoom:50%;" /><h2 id="2、webpack工作方式"><a href="#2、webpack工作方式" class="headerlink" title="2、webpack工作方式"></a>2、webpack工作方式</h2><p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><img src="/img/wp1.png" alt="webpack" style="zoom:50%;" /><h2 id="3、webpack的核心概念"><a href="#3、webpack的核心概念" class="headerlink" title="3、webpack的核心概念"></a>3、webpack的核心概念</h2><ul><li>入口(entry)：打包的入口</li><li>输出(output)：打包的出口</li><li>loader：loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）</li><li>插件(plugins)：在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情</li></ul><h2 id="4、开始使用webpack"><a href="#4、开始使用webpack" class="headerlink" title="4、开始使用webpack"></a>4、开始使用webpack</h2><h4 id="正式使用Webpack前的准备"><a href="#正式使用Webpack前的准备" class="headerlink" title="正式使用Webpack前的准备"></a>正式使用Webpack前的准备</h4><ol><li><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件。输入这个命令后，终端会问一堆问题，回车默认即可。</p></li><li><p>package.json文件就绪后，安装webpack作为依赖包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//安装webpack<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack//全局安装的话<span class="token function">npm</span> <span class="token function">install</span> -g webpack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>回到my-wp文件夹，新建app public文件夹，app用来存放原始数据和js模块，public用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个<code>index.html</code>文件）。接下来我们再创建三个文件:</p></li></ol><ul><li><p><code>index.html</code> –放在public文件夹中;</p></li><li><p><code>Greeter.js</code>– 放在app文件夹中;</p></li><li><p><code>main.js</code>– 放在app文件夹中;</p><p>此时项目结构如下图所示：</p><img src="/img/wp2.png" alt="webpack" style="zoom:50%;" /></li></ul><p>我们在<strong>index.html</strong>文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为<code>bundle.js</code>，之后我们还会详细讲述）。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>mywebpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在<code>Greeter.js</code>中定义一个返回包含问候信息的<code>html</code>元素的函数,并依据CommonJS规范导出这个函数为一个模块：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Greeter.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> greet <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  greet<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Hi there and greetings!"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> greet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main.js</code>文件中我们写入下述代码，用以把<code>Greeter模块</code>返回的节点插入页面。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//main.js </span><span class="token keyword">const</span> greeter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./Greeter.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在根目录下（my-wp）新建一个名为<code>webpack.config.js</code>的文件，用来配置webpack。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span>  __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span><span class="token comment">//已多次提及的唯一入口文件</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span><span class="token comment">//打包后的文件存放的地方</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token comment">//打包后输出文件的文件名</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p></blockquote><p>之后在命令行里运行<code>webpack</code>命令就可以了。这条命令会自动引用<code>webpack.config.js</code>文件中的配置选项，结果如图：</p><p><img src="/img/wp3.png"></p><p>可以看出<code>webpack</code>同时编译了<code>main.js</code> 和<code>Greeter,js</code>,现在打开<code>index.html</code>,可以看到我们输出的Hello World了。</p><h4 id="更快捷的执行打包任务"><a href="#更快捷的执行打包任务" class="headerlink" title="更快捷的执行打包任务"></a>更快捷的执行打包任务</h4><p>在命令行中输入命令需要代码类似于<code>node_modules/.bin/webpack</code>这样的路径其实是比较烦人的，不过值得庆幸的是<code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<code>package.json</code>中对<code>scripts</code>对象进行相关设置即可，设置方法如下。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webpack-sample-project"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Sample webpack project"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span> <span class="token comment">// 修改的是这里，JSON文件不支持注释，引用时请清除</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"zhang"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"3.10.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注：</strong><code>package.json</code>中的<code>script</code>会安装一定顺序寻找命令对应位置，本地的<code>node_modules/.bin</code>路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p></blockquote><p>npm的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行对应的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run &#123;script name&#125;</code>如<code>npm run build</code>。</p><p>现在只需要执行<code>npm start</code>就可以打包文件了。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模块 </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录8：类型检查</title>
      <link href="2021/05/28/reactstudy8/"/>
      <url>2021/05/28/reactstudy8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用PropTypes进行类型检查"><a href="#使用PropTypes进行类型检查" class="headerlink" title="使用PropTypes进行类型检查"></a>使用PropTypes进行类型检查</h1><p><em><strong>注：</strong></em>自 React v15.5 起，<code>React.PropTypes</code> 已移入另一个包中。使用 <code>prop-types</code> 库代替。（需要多一步import）</p><h2 id="propTypes"><a href="#propTypes" class="headerlink" title="propTypes"></a>propTypes</h2><p>类似于TS的类型检查，React也内置了这样的功能，只需配置propTypes属性：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Greeting<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//限制props类型为string，isRequired属性 不满足条件会报错</span>  name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>PropTypes</code> 提供一系列验证器，可用于确保组件接收到的数据类型是有效的。在本例中, 我们使用了 <code>PropTypes.string</code>。当传入的 <code>prop</code> 值类型不正确时，JavaScript 控制台将会显示警告。出于性能方面的考虑，<code>propTypes</code> 仅在开发模式下进行检查。</p><h2 id="限制单个元素"><a href="#限制单个元素" class="headerlink" title="限制单个元素"></a>限制单个元素</h2><p>你可以通过 <code>PropTypes.element</code> 来确保传递给组件的 children 中只包含一个元素。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这必须只有一个元素，否则控制台会打印警告。</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>MyComponent<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  children<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>element<span class="token punctuation">.</span>isRequired<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认Props值"><a href="#默认Props值" class="headerlink" title="默认Props值"></a>默认Props值</h2><p>可以通过配置特定的 <code>defaultProps</code> 属性来定义 <code>props</code> 的默认值：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 指定 props 的默认值：</span>Greeting<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Stranger'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 渲染出 "Hello, Stranger"：</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>defaultProps</code> 用于确保 <code>this.props.name</code> 在父组件没有指定其值时，有一个默认值。<code>propTypes</code> 类型检查发生在 <code>defaultProps</code> 赋值后，所以类型检查也适用于 <code>defaultProps</code>。</p><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>函数组件想要添加PropsTypes，需要在导出之前以单独声明的一个函数的形式，声明该组件，具体代码如下：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token keyword">function</span> <span class="token function">HelloWorldComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span>HelloWorldComponent<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">&#125;</span><span class="token comment">//声明</span><span class="token keyword">export</span> <span class="token keyword">default</span> HelloWorldComponent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 类型检查 </tag>
            
            <tag> props </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录7：React组件的组合用法</title>
      <link href="2021/05/28/reactstudy7/"/>
      <url>2021/05/28/reactstudy7/</url>
      
        <content type="html"><![CDATA[<h1 id="React组件的组合用法"><a href="#React组件的组合用法" class="headerlink" title="React组件的组合用法"></a>React组件的组合用法</h1><h2 id="1、组件的嵌套"><a href="#1、组件的嵌套" class="headerlink" title="1、组件的嵌套"></a>1、组件的嵌套</h2><ul><li><p>嵌套的情况下，子组件写在父组件的render函数中</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">this is context</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 将子组件直接写进父组件的render函数中 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text"> this is home </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2、this-props-children"><a href="#2、this-props-children" class="headerlink" title="2、this.props.children"></a>2、this.props.children</h2><p>this.props.children是用来组合组件的，效果类似于vue的插槽。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Title</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">this is title</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">this is context</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text"> this is home </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token comment">/* 2. 在Home组件中使用 this.props.children来接收  */</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token comment">/* 1. 将子组件放在Home组件的内容中 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Title</span></span><span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context</span></span><span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Home</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code>的时候要小心。</p><p>React提供一个工具方法 <code>React.Children</code>来处理 <code>this.props.children</code> 。我们可以用 <code>react.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法，请参考<a href="https://facebook.github.io/react/docs/top-level-api.html#react.children">官方文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 组件 </tag>
            
            <tag> 组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录6：如何用React构建应用程序</title>
      <link href="2021/05/26/reactstudy6/"/>
      <url>2021/05/26/reactstudy6/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用React构建应用程序"><a href="#如何用React构建应用程序" class="headerlink" title="如何用React构建应用程序"></a>如何用React构建应用程序</h1><h2 id="1、将UI拆解为组件"><a href="#1、将UI拆解为组件" class="headerlink" title="1、将UI拆解为组件"></a>1、将UI拆解为组件</h2><ul><li><p>拿到设计图，拆分组件。遵从单一职责原则，即一个组件理想情况下只处理一件事。</p></li><li><p>拆分完组件后，对他们进行层级结构排列。即分为父组件、自组件等</p></li></ul><h2 id="2、用-React-构建一个静态版本"><a href="#2、用-React-构建一个静态版本" class="headerlink" title="2、用 React 构建一个静态版本"></a>2、用 React 构建一个静态版本</h2><p>只使用props在父子组件间进行传值，没有交互，不要使用state。</p><h2 id="3、确定-UI-state-状态-的最小（但完整）表示"><a href="#3、确定-UI-state-状态-的最小（但完整）表示" class="headerlink" title="3、确定 UI state(状态) 的最小（但完整）表示"></a>3、确定 UI state(状态) 的最小（但完整）表示</h2><p>要正确的构建应用程序，你首先需要考虑你的应用程序需要的可变 state(状态) 的最小集合。这里的关键是：DRY: <em><strong>不要重复你自己</strong></em>。找出你的应用程序所需 state(状态) 的绝对最小表示，并且可以以此计算出你所需的所有其他数据内容。例如，如果你正在构建一个 TODO 列表，只保留一个 TODO 元素数组即可;不需要为元素数量保留一个单独的 state(状态) 变量。相反，当你要渲染 TODO 计数时，只需要获取 TODO 数组的长度即可。</p><p>如何判断哪些数据是<em><strong>state</strong></em>：</p><ul><li><p>是否通过 props(属性) 从父级传入？ 如果是这样，它可能不是 state(状态) 。</p></li><li><p>是否永远不会发生变化？ 如果是这样，它可能不是 state(状态)。</p></li><li><p>是否可以由组件中其他的 state(状态) 或 props(属性) 计算得出？如果是这样，则它不是 state(状态)。</p></li></ul><h2 id="4、确定state的位置"><a href="#4、确定state的位置" class="headerlink" title="4、确定state的位置"></a>4、确定state的位置</h2><p>对于应用中的每一个 state(状态) ：</p><ul><li>确定每个基于这个 state(状态) 渲染的组件。</li><li>找出公共父级组件（一个单独的组件，在组件层级中位于所有需要这个 state(状态) 的组件的上面。愚人码头注：父级组件）。</li><li>公共父级组件 或者 另一个更高级组件拥有这个 state(状态) 。</li><li>如果找不出一个拥有该 state(状态) 的合适组件，可以创建一个简单的新组件来保留这个 state(状态) ，并将其添加到公共父级组件的上层即可。</li></ul><h2 id="5、添加反向数据流"><a href="#5、添加反向数据流" class="headerlink" title="5、添加反向数据流"></a>5、添加反向数据流</h2><p>即添加setState()，用来在组件状态更新时调用setState方法，完成state更新进而影响页面。</p><p><em><strong>有可能这种写法会比你通常的写法多几行代码，但切记阅读代码的重要性远远高于写代码，模块化、结构清晰的代码最利于阅读。当创建一个大组件库的时候，你将感激模块化、结构清晰和可以重用的代码，同时你的代码行数会慢慢减少。</strong></em>:)</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 应用程序 </tag>
            
            <tag> 实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录5：列表&amp;Key</title>
      <link href="2021/05/26/reactstudy5/"/>
      <url>2021/05/26/reactstudy5/</url>
      
        <content type="html"><![CDATA[<h1 id="列表-amp-Key"><a href="#列表-amp-Key" class="headerlink" title="列表&amp;Key"></a>列表&amp;Key</h1><h2 id="1、渲染多个组件"><a href="#1、渲染多个组件" class="headerlink" title="1、渲染多个组件"></a>1、渲染多个组件</h2><p>可以使用map()来遍历数组，将数组中的元素变为列表标签，然后赋值给listItems，再进行插入与渲染。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>listItems<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、基础列表组件"><a href="#2、基础列表组件" class="headerlink" title="2、基础列表组件"></a>2、基础列表组件</h2><p>我们通常在组件内渲染列表，可以把上述例子重构，使之成为一个组件。这个组件接收<code>numbers</code>数组作为参数，并输出一个元素列表。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token comment">//返回一个ul列表</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>listItems<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token comment">//传入numbers数组参数</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NumberList</span></span> <span class="token attr-name">numbers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>numbers<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：这里应该分配key值，见下：</p><h2 id="3、key"><a href="#3、key" class="headerlink" title="3、key"></a>3、key</h2><p><em>key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</em></p><ul><li><p>通常使用id来作为元素的key，尽量不要使用index；</p></li><li><p>key值在兄弟节点之间必须唯一，而不需要全局唯一；</p></li><li><p>经验法则：map()方法中的元素需要设置key属性，原因如下：</p><p>元素的 key 只有放在就近的数组上下文中才有意义。</p><p>比方说，如果你<a href="https://zh-hans.reactjs.org/docs/components-and-props.html#extracting-components">提取</a>出一个 <code>ListItem</code> 组件，你应该把 key 保留在数组中的这个 <code>&lt;ListItem /&gt;</code> 元素上，而不是放在 <code>ListItem</code> 组件中的 <code>&lt;li&gt;</code> 元素上。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 列表 </tag>
            
            <tag> key </tag>
            
            <tag> 渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录4：条件渲染</title>
      <link href="2021/05/26/reactstudy4/"/>
      <url>2021/05/26/reactstudy4/</url>
      
        <content type="html"><![CDATA[<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p><em>在 React 中，你可以创建不同的组件来封装各种你需要的行为。然后，依据应用的不同状态，你可以只渲染对应状态下的部分内容。</em></p><h2 id="1、if或条件运算符"><a href="#1、if或条件运算符" class="headerlink" title="1、if或条件运算符"></a>1、if或条件运算符</h2><p>自定义一个Greeting组件，根据用户是否登陆来决定显示哪个组件。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Welcome back!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">GuestGreeting</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Please sign up.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserGreeting</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GuestGreeting</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token comment">// Try changing to isLoggedIn=&#123;true&#125;:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个事例根据<code>isLoggedIn</code>的值来渲染不同的问候语。（if语句判断）</p><h2 id="2、元素变量"><a href="#2、元素变量" class="headerlink" title="2、元素变量"></a>2、元素变量</h2><p>可以使用变量来储存元素。</p><p>新建两个组件，注销和登陆按钮：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">LoginButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Login    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">LogoutButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Logout    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个有状态的组件，<code>LoginControl</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleLoginClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleLogoutClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">&#123;</span>isLoggedIn<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">handleLoginClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>isLoggedIn<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">handleLogoutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>isLoggedIn<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>    <span class="token keyword">let</span> button<span class="token punctuation">;</span>        <span class="token comment">//条件判断输出不同button</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LogoutButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoginButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        &lt;!-- Greeting组件根据状态渲染成不同的按钮 并渲染button -->      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>isLoggedIn<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>button<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoginControl</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  docunment<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、与运算符-amp-amp"><a href="#3、与运算符-amp-amp" class="headerlink" title="3、与运算符 &amp;&amp;"></a>3、与运算符 &amp;&amp;</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Mailbox</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> unreadMessages <span class="token operator">=</span> props<span class="token punctuation">.</span>unreadMessages<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      &lt;!-- 采用与运算符来进行条件渲染 -->      </span><span class="token punctuation">&#123;</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token plain-text">          You have </span><span class="token punctuation">&#123;</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token plain-text"> unread messages.        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Mailbox</span></span> <span class="token attr-name">unreadMessages</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>messages<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以能这样做，是因为在 JavaScript 中，<code>true &amp;&amp; expression</code> 总是会返回 <code>expression</code>, 而 <code>false &amp;&amp; expression</code> 总是会返回 <code>false</code>。</p><p>因此，如果条件是 <code>true</code>，<code>&amp;&amp;</code> 右侧的元素就会被渲染，如果是 <code>false</code>，React 会忽略并跳过它。</p><p>请注意，返回 false 的表达式会使 <code>&amp;&amp;</code> 后面的元素被跳过，但会返回 false 表达式。在下面示例中，render 方法的返回值是 <code>&lt;div&gt;0&lt;/div&gt;</code>。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span> count <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Messages: </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、三目运算符"><a href="#4、三目运算符" class="headerlink" title="4、三目运算符"></a>4、三目运算符</h2><p><em><strong>渲染文本：</strong></em></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      The user is </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token operator">:</span> <span class="token string">'not'</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token plain-text"> logged in.    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em><strong>渲染组件</strong></em></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>isLoggedIn        <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LogoutButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>        <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LoginButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、阻止组件渲染"><a href="#5、阻止组件渲染" class="headerlink" title="5、阻止组件渲染"></a>5、阻止组件渲染</h2><p>在极少数情况下，你可能希望能隐藏组件，即使它已经被其他组件渲染。若要完成此操作，你可以让 <code>render</code> 方法直接返回 <code>null</code>，而不进行任何渲染。</p><p>下面的示例中，<code>&lt;WarningBanner /&gt;</code> 会根据 prop 中 <code>warn</code> 的值来进行条件渲染。如果 <code>warn</code> 的值是 <code>false</code>，那么组件则不会渲染:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">WarningBanner</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Warning!    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>showWarning<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleToggleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleToggleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      showWarning<span class="token operator">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>showWarning    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WarningBanner</span></span> <span class="token attr-name">warn</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning <span class="token operator">?</span> <span class="token string">'Hide'</span> <span class="token operator">:</span> <span class="token string">'Show'</span><span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件的 <code>render</code> 方法中返回 <code>null</code> 并不会影响组件的生命周期。例如，上面这个示例中，<code>componentDidUpdate</code> 依然会被调用。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 条件渲染 </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录3：事件处理</title>
      <link href="2021/05/26/reactstudy3/"/>
      <url>2021/05/26/reactstudy3/</url>
      
        <content type="html"><![CDATA[<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>React元素的事件处理类似于DOM元素，只是一些语法不同。</p><h2 id="1、命名"><a href="#1、命名" class="headerlink" title="1、命名"></a>1、命名</h2><ul><li><p>React事件命名采用小驼峰式（camelCase），而不是纯小写。</p></li><li><p>使用JSX语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</p><p>例如，HTML：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeState()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  改变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而在React中：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;changeState&#125;</span><span class="token punctuation">></span></span>改变<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2、默认行为阻止"><a href="#2、默认行为阻止" class="headerlink" title="2、默认行为阻止"></a>2、默认行为阻止</h2><p>类似于a标签的默认跳转事件（return false），在react中：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里阻止跳转</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The link was clicked.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Click me    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、绑定事件"><a href="#3、绑定事件" class="headerlink" title="3、绑定事件"></a>3、绑定事件</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---------'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      msg<span class="token operator">:</span> props<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>      counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      counter2<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App-header<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>logo<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App-logo<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>logo<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onclick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>tick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Counter:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>—— 你必须谨慎对待 JSX 回调函数中的 <code>this</code>，在 JavaScript 中，class 的方法默认不会绑定<code>this</code>。如果你忘记绑定<code>this.handleClick</code> 并把它传入了 <code>onClick</code>，当你调用这个函数的时候 <code>this</code> 的值为 <code>undefined</code>。</p><p>由于作用域的问题，tick函数得写在外面，这样一来，也就不能操作App这个类下面所有的属性及事件了。</p><p>比如，在tick()函数中<code>console.log(this)</code>输出为<code>undefined</code>。</p><p>对此，有三种解决方法：</p><ul><li>手动绑定this</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      msg<span class="token operator">:</span> props<span class="token punctuation">.</span>msg<span class="token punctuation">,</span>      counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      counter2<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//利用bind()手动绑定</span>  <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App-header<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>logo<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>App-logo<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>logo<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onclick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>tick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Counter:</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>采用属性初始化器语法</p><p><em><strong>箭头函数</strong></em></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function-variable function">tick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>有性能问题的第三种</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用这个语法有个问题就是每次组件渲染的时候都会创建一个不同的回调函数。在大多数情况下，这没有问题。然而如果这个回调函数作为一个属性值传入低阶组件，这些组件可能会进行额外的重新渲染。我们通常建议在构造函数中绑定或使用属性初始化器语法来避免这类性能问题。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 规范 </tag>
            
            <tag> 语法 </tag>
            
            <tag> React </tag>
            
            <tag> 事件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是DevOps</title>
      <link href="2021/05/25/devops/"/>
      <url>2021/05/25/devops/</url>
      
        <content type="html"><![CDATA[<h3 id="瀑布式开发"><a href="#瀑布式开发" class="headerlink" title="瀑布式开发"></a>瀑布式开发</h3><p>​        一个软件从零开始到最终交付，大致要经历：规划、编码、构建、测试、发布、部署和维护。最初程序简单的时候，程序员一人就能完成所有阶段的工作。而当软件产业不断发展，出现精细化分工，如开发、测试、运维等。于是由原先的程序员一人完成工作，转变成了传统的软件开发流程：</p><p>​        开发花费大量时间编写代码，然后把代码交给QA进行测试，再将最终的发布版本交给运维团队去部署。即开发 =&gt;测试=&gt;部署。这种早期采用的软件交付模型，被称为<strong>瀑布模型</strong>。简而言之，就是等一个阶段所有工作完成之后才进入下一个阶段，而当用户对系统的需求不断增加，给的时间周期越来越短的时候，瀑布式开发就显得笨重而又迟缓。</p><h3 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h3><p>​        敏捷开发是一种能应对快速变化需求的软件开发能力。简单来说，就是把大项目变成小项目，把大时间点变成小时间点。就像这样：</p><img src="/img/截屏2021-05-20 下午5.12.51.png" alt="敏捷开发" style="zoom:50%;" /><p>​        比较流行的案例是scrum、XP极限编程。在新迭代（一般2-6周）开始前，产品经理将需求拆分成具体的开发任务，研发人员进行任务认领，每日会进行任务的review，直至开发完成，发布新的可用版本。</p><p>​        虽然敏捷开发大幅提高了开发效率和版本更新速度，但是它的效果仅限于开发环节。在运维那边，依旧是铁板一块，成为新的瓶颈。运维的核心诉求就是<em>稳定压倒一切</em>，运维非常排斥改变（因为容易出问题），而敏捷开发就是不断改变的过程，这就造成了两者的矛盾。</p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>​        DevOps集文化理念、实践和工具于一身。可以提高组织交付应用程序和服务的能力。与使用传统软件和基础设施管理流程相比，能够帮助组织更快的发展和改进产品。这种速度使组织更好的服务其客户，并在市场上高效的参与竞争。</p><p>​        DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障部门（QA）之间的沟通、协作与整合。</p><img src="/img/截屏2021-05-20 下午4.51.38.png" alt="DevOps" style="zoom:20%;" /><p>​        <strong>DevOps</strong> = development + Operation，它就是让开发人员和运维人员更好的沟通合作，通过<strong>自动化流程</strong>来使得软件整体过程更加快捷可靠。在devops下，我们需要重新梳理全流程的规范和标准。</p><p>​        在这个流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统的部署中，并提供系统部署的优化建议。DevOps贯穿了软件整个生命周期，而不仅限于开发阶段。</p><img src="/img/截屏2021-05-20 下午5.26.30.png" alt="DevOps与其他模式" style="zoom:50%;" /><p>​        DevOps这样的开发模型，需要持续开发、持续集成（CI）、持续测试、持续部署/交付（CD）、持续监控，每一次代码改动都会触发一次校验，每天每时每刻都可进行新版本的上线。</p><img src="/img/截屏2021-05-20 下午5.32.13.png" alt="DevOps" style="zoom:50%;" /><p>​        <strong>持续集成（CI）</strong>开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p>​        <strong>持续交付（CD）</strong>完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p><p>​        我们认为：<strong>为了帮助研发团队在保持质量的前提下提高交付效率的方法和方法论都隶属于DevOps的范畴</strong>。</p><h3 id="Google提出了5个DevOps原则："><a href="#Google提出了5个DevOps原则：" class="headerlink" title="Google提出了5个DevOps原则："></a>Google提出了5个DevOps原则：</h3><ol><li>精简组织结构</li><li>愿意承担一部分试错带来的损失；</li><li>分阶段地一小步一小步地进行转型；</li><li>最大化地利用工具和自动化流程；</li><li>对所有的过程和结果进行记录和分析。</li></ol><h3 id="DevOps-中的一套成熟的运维系统包括什么？"><a href="#DevOps-中的一套成熟的运维系统包括什么？" class="headerlink" title="DevOps 中的一套成熟的运维系统包括什么？"></a>DevOps 中的一套成熟的运维系统包括什么？</h3><ul><li>自动化测试</li><li>批量配置基础组件</li><li>监控，告警</li><li>数据可视化</li><li>协同合作</li></ul><p>一套成熟的运维系统，能够将应用、网络、计算、存储、虚拟化等资源的性能以及告警信息进行综合分析，通过简洁易懂的界面，直观呈现业务健康水平。当出现故障时，能够第一时间受到信息，从监控相关信息确定问题位置，缩小故障定位范围，确定问题是在计算、应用还是网络，进而明确问题职责，让相应的开发运维迅速处理问题，没有推脱责任之嫌。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> 敏捷开发 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 软件开发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录2：State&amp;生命周期</title>
      <link href="2021/05/24/reactstudy2/"/>
      <url>2021/05/24/reactstudy2/</url>
      
        <content type="html"><![CDATA[<ol><li>当 <code>&lt;Clock /&gt;</code> 被传给 <code>ReactDOM.render()</code>的时候，React 会调用 <code>Clock</code> 组件的构造函数。因为 <code>Clock</code> 需要显示当前的时间，所以它会用一个包含当前时间的对象来初始化 <code>this.state</code>。我们会在之后更新 state。</li><li>之后 React 会调用组件的 <code>render()</code> 方法。这就是 React 确定该在页面上展示什么的方式。然后 React 更新 DOM 来匹配 <code>Clock</code> 渲染的输出。</li><li>当 <code>Clock</code> 的输出被插入到 DOM 中后，React 就会调用 <code>ComponentDidMount()</code> 生命周期方法。在这个方法中，<code>Clock</code> 组件向浏览器请求设置一个计时器来每秒调用一次组件的 <code>tick()</code> 方法。</li><li>浏览器每秒都会调用一次 <code>tick()</code> 方法。 在这方法之中，<code>Clock</code> 组件会通过调用 <code>setState()</code> 来计划进行一次 UI 更新。得益于 <code>setState()</code> 的调用，React 能够知道 state 已经改变了，然后会重新调用 <code>render()</code> 方法来确定页面上该显示什么。这一次，<code>render()</code> 方法中的 <code>this.state.date</code> 就不一样了，如此以来就会渲染输出更新过的时间。React 也会相应的更新 DOM。</li><li>一旦 <code>Clock</code> 组件从 DOM 中被移除，React 就会调用 <code>componentWillUnmount()</code> 生命周期方法，这样计时器就停止了。</li></ol><h2 id="1、State使用"><a href="#1、State使用" class="headerlink" title="1、State使用"></a>1、State使用</h2><h3 id="不要直接修改State"><a href="#不要直接修改State" class="headerlink" title="不要直接修改State"></a>不要直接修改State</h3><p>例如，此代码不会重新渲染组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而是应该使用<code>setState()</code> </p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>comment<span class="token operator">:</span> <span class="token string">'Hello'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造函数是唯一可以给<code>this.state</code>赋值的地方。</p><h2 id="2、State的更新可能是异步的"><a href="#2、State的更新可能是异步的" class="headerlink" title="2、State的更新可能是异步的"></a>2、State的更新可能是异步的</h2><p>为了性能，React会把多个<code>setState()</code>调用合并。 如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>counter2<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码输出结果为：<code>counter2 : 1  counter : 1;</code></p><p>很显然，因为异步，在给counter2赋值的时候，取到的<code>this.state.counter</code>的值还是0。解决方案如下：</p><p>react提供了该方法的拓展：<strong>接受一个函数作为参数</strong></p><p>该函数将接收先前的状态作为第一个参数，将此次更新被应用时的props作为第二个参数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">preState<span class="token punctuation">,</span>props</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>counter2<span class="token operator">:</span> preState<span class="token punctuation">.</span>counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码输出结果为：<code>counter2 : 2 counter : 1;</code></p><p>preState中，counter已经加了1.</p><h2 id="3、数据是向下流动的"><a href="#3、数据是向下流动的" class="headerlink" title="3、数据是向下流动的"></a>3、数据是向下流动的</h2><p>不管是父组件或是子组件都无法知道某个组件是有状态的还是无状态的，并且它们也并不关心它是函数组件还是 class 组件。</p><p>这就是为什么称 state 为局部的或是封装的的原因。除了拥有并设置了它的组件，其他组件都无法访问。</p><p>组件可以选择把它的 state 作为 props 向下传递到它的子组件中。<code>FormattedDate</code> 组件会在其 props 中接收参数 <code>date</code>，但是组件本身无法知道它是来自于 <code>Clock</code> 的 state，或是 <code>Clock</code> 的 props，还是手动输入的。</p><p>这通常会被叫做 <em><strong>“自上而下”</strong></em> 或是 <em><strong>“单向”</strong></em> 的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中<em><strong>“低于”</strong></em>它们的组件。</p><p>如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。</p><h2 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h2><h3 id="①初始化"><a href="#①初始化" class="headerlink" title="①初始化"></a>①初始化</h3><h4 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps()"></a>getDefaultProps()</h4><p>​    设置默认props</p><h4 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState()"></a>getInitialState()</h4><p>​    class语法下没有此钩子函数，直接在constructor中定义this.state。此时可以访问this.props</p><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><p>​    组件初始化时调用，整个生命周期只调用一次，此时可以修改state</p><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p>​    react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时不能更改state了</p><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>​    组件渲染之后调用，只调用一次。</p><h3 id="②更新"><a href="#②更新" class="headerlink" title="②更新"></a>②更新</h3><h4 id="componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps(nextProps)</h4><p>​    组件初始化时不调用，组件接受新的props时调用。</p><h4 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h4><p>​    可以在此对比前后两个props和state是否相同，若相同则返回false阻止更新来提升性能</p><h4 id="componentWillUpdata-nextProps-nextState"><a href="#componentWillUpdata-nextProps-nextState" class="headerlink" title="componentWillUpdata(nextProps, nextState)"></a>componentWillUpdata(nextProps, nextState)</h4><p>​    组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state</p><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>​    组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。</p><h3 id="③卸载"><a href="#③卸载" class="headerlink" title="③卸载"></a>③卸载</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>​    组件将要卸载时调用，一些事件监听和定时器需要在此时清除。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> React </tag>
            
            <tag> 生命周期 </tag>
            
            <tag> State </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习记录1：JSX与组件</title>
      <link href="2021/05/23/reactstudy1/"/>
      <url>2021/05/23/reactstudy1/</url>
      
        <content type="html"><![CDATA[<h1 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h1><p><em>Create React App</em>，是一个用于<strong>学习React</strong>的舒适环境，也是用React创建一个新的单页应用的最佳方式。</p><p>创建项目，在控制台中执行：</p><pre class="line-numbers language-none"><code class="language-none">npx create-react-app my-appcd my-appnpm start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就新建好一个新的单页应用，可以开始写代码了！</p><h1 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h1><p><em>JSX</em>是一种JavaScript的语法扩展，用于React架构中，它具有JavaScript的全部功能。可以生成React<strong>元素</strong>。</p><h2 id="1、大括号"><a href="#1、大括号" class="headerlink" title="1、大括号"></a>1、大括号</h2><p>JSX语法中，可以在大括号内放置任何有效的JavaScript表达式，包括函数等。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'yyz'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementBuId</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、表达式"><a href="#2、表达式" class="headerlink" title="2、表达式"></a>2、表达式</h2><p>编译之后，JSX表达式会被转为普通js函数调用。即可以把JSX赋值给变量，把JSX当参数传入，以及从函数中返回JSX：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,</span><span class="token punctuation">&#123;</span><span class="token function">getName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,Stranger.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、特定属性"><a href="#3、特定属性" class="headerlink" title="3、特定属性"></a>3、特定属性</h2><p>可以用大括号在属性值中插入js表达式，也可以通过引号将属性值指定为字符串。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabIndex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>0<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>注</em>：React DOM使用camelCase（小驼峰命名），如class变为了<code>className</code></p><h2 id="4、表示对象"><a href="#4、表示对象" class="headerlink" title="4、表示对象"></a>4、表示对象</h2><p>Babel就把JSX转译成一个名为<code>React.creatElement()</code>函数调用。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">    Hello, world!  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等效于</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>className<span class="token operator">:</span> <span class="token string">'greeting'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上它创建了一个这样的对象：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 注意：这是简化过的结构</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    className<span class="token operator">:</span> <span class="token string">'greeting'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token string">'Hello, world!'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些对象被称为 <strong>“React元素”</strong>。</p><h1 id="元素渲染"><a href="#元素渲染" class="headerlink" title="元素渲染"></a>元素渲染</h1><p><em><strong>元素是构成React应用的最小砖块。</strong></em></p><p>React元素是创建开销极小的普通对象。React DOM会负责更新DOM来与React元素保持一致。</p><h2 id="1、将元素渲染为DOM"><a href="#1、将元素渲染为DOM" class="headerlink" title="1、将元素渲染为DOM"></a>1、将元素渲染为DOM</h2><p>React应用通常都只有单一的根DOM节点</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需把React元素一起传入<code>ReactDOM.render()</code>，就能把它渲染到根DOM节点中。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">hello,world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2、更新已渲染的元素"><a href="#2、更新已渲染的元素" class="headerlink" title="2、更新已渲染的元素"></a>2、更新已渲染的元素</h2><p>React元素是不可变对象（const），无法改变它的子元素或属性。一个元素就像电影的单帧：代表某个特定时刻的UI。</p><p>更新UI可以创建一个全新元素，并将其传入<code>ReactDOM.render()</code>。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">It is </span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>root<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中，每秒都会调用render()；</p><h2 id="3、React只更新它需要更新的部分"><a href="#3、React只更新它需要更新的部分" class="headerlink" title="3、React只更新它需要更新的部分"></a>3、React只更新它需要更新的部分</h2><p>React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。</p><p>尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。</p><h1 id="组件-amp-props"><a href="#组件-amp-props" class="headerlink" title="组件&amp;props"></a>组件&amp;props</h1><p><em><strong>组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。</strong></em></p><p>组件，从概念上类似于JS函数。它接受任意的入参（即“props”），并返回用于描述页面展示内容的React元素。（意思就是return一个元素）</p><h2 id="1、函数组件与class组件"><a href="#1、函数组件与class组件" class="headerlink" title="1、函数组件与class组件"></a>1、函数组件与class组件</h2><p>可以编写JS函数来定义组件</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素。这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数。</p><p>同时还可以使用ES6的class来定义组件：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello,</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个组件等效。</p><h2 id="2、渲染组件"><a href="#2、渲染组件" class="headerlink" title="2、渲染组件"></a>2、渲染组件</h2><p>React元素也可以是用户自定义的组件：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（比如name）以及子组件转换为单个对象传递给组件，这个对象被称之为 “props”。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中，执行了如下步骤：</p><ul><li>调用ReactDOM.render()函数，并传入element作为参数。</li><li>React调用Welcome组件，并将{name: ‘Sara’}作为props传入。</li><li>Welcome组件将<code>&lt;h1&gt;Hello,Sara&lt;/h1&gt;</code>元素作为返回值。</li><li>React DOM将DOM高效地更新为<code>&lt;h1&gt;Hello,Sara&lt;/h1&gt;</code></li></ul><p>注：<strong>组件名称必须以大写字母开头。</strong>小写字母开头的组件会被视为原生DOM标签。</p><h2 id="3、组合组件"><a href="#3、组合组件" class="headerlink" title="3、组合组件"></a>3、组合组件</h2><p>组件可以在输出中引用其他组件。如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cahal<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Welcome</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edite<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常来说，每个新的 React 应用程序的顶层组件都是 <code>App</code> 组件。</p><h2 id="4、提取组件"><a href="#4、提取组件" class="headerlink" title="4、提取组件"></a>4、提取组件</h2><p>即将组件拆分为更小的组件。</p><p>最初看上去，提取组件可能是一件繁重的工作，但是，在大型应用中，构建可复用组件库是完全值得的。根据经验来看，如果 UI 中有一部分被多次使用（<code>Button</code>，<code>Panel</code>，<code>Avatar</code>），或者组件本身就足够复杂（<code>App</code>，<code>FeedStory</code>，<code>Comment</code>），那么就可以考虑将它独立提取出来</p><h2 id="5、props的只读性"><a href="#5、props的只读性" class="headerlink" title="5、props的只读性"></a>5、props的只读性</h2><p>组件无论是使用函数声明还是通过 class 声明，都决不能修改自身的 props。</p><p><em><strong>纯函数</strong></em> 不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。</p><p>而所有React组件都必须像纯函数一样保护它们的props不被更改。</p>]]></content>
      
      
      <categories>
          
          <category> React.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jsx </tag>
            
            <tag> React </tag>
            
            <tag> 组件 </tag>
            
            <tag> 元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas相关</title>
      <link href="2021/04/06/canvas/"/>
      <url>2021/04/06/canvas/</url>
      
        <content type="html"><![CDATA[<h1 id="canvas相关"><a href="#canvas相关" class="headerlink" title="canvas相关"></a>canvas相关</h1><p>觉得自己实在太<em>垃圾</em>了，就来整理一下，做人还是要 <strong>多总结</strong>。</p><hr><h1 id="canvas设置宽高"><a href="#canvas设置宽高" class="headerlink" title="canvas设置宽高"></a>canvas设置宽高</h1><p>1.canvas大小默认为300X150；<br>2.错误的设置宽高，导致画布内内容变形<br>    使用css设置画布的大小会导致画布按比例缩放你设置的值。（css只是设置canvas在屏幕的显示大小）<br>3.正确设置方法是设置canvas标签的width height属性。 </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意 没有单位。</p><p>#绘画<br>    moveTo(); //起始点<br>    lineTo(); //路线<br>    stroke(); //结束</p><p>例：<br>    var c=document.getElementById(“myCanvas”);<br>    var ctx=c.getContext(“2d”);<br>    ctx.moveTo(0,0);<br>    ctx.lineTo(200,100);<br>    ctx.stroke();</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> html5 </tag>
            
            <tag> 绘图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组操作</title>
      <link href="2021/04/01/array/"/>
      <url>2021/04/01/array/</url>
      
        <content type="html"><![CDATA[<h1 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h1><p>面试觉得自己实在太<em>垃圾</em>了，就来整理一下常问问题，做人还是要 <strong>多总结</strong>。</p><hr><h3 id="数组的一些操作"><a href="#数组的一些操作" class="headerlink" title="数组的一些操作"></a>数组的一些操作</h3><p>concat()，连接两个或更多的数组，<strong>返回结果</strong>。<code>arr.concat(12,arr1,arr2,34)</code></p><p>pop(),删除并返回数组<strong>最后一个元素</strong>。 arr.pop(),数组为空则不改变数组 返回undefined</p><p>push(),向数组的末尾添加一个或多个元素，<strong>返回新的长度</strong>。  可以push数组。但不会展开，生成二维数组，<code>arr.push([1,2],34)</code>,不像concat会全部展开，而是以数组的形式保存着。</p><p>shift()，删除并返回数组<strong>第一个元素</strong>。和pop类似。</p><p>unshift(),向数组的开头添加一个或多个元素，<strong>返回新的长度</strong>。和push类似。</p><p>slice()，从已有的数组中返回选定的元素。</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串翻转</title>
      <link href="2021/04/01/reversestring/"/>
      <url>2021/04/01/reversestring/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串翻转"><a href="#字符串翻转" class="headerlink" title="字符串翻转"></a>字符串翻转</h1><p>面试觉得自己实在太<em>垃圾</em>了，就来整理一下常问问题，做人还是要 <strong>多总结</strong>。</p><hr><h3 id="字符串翻转还是比较好实现的，不过还是要多几种思路。"><a href="#字符串翻转还是比较好实现的，不过还是要多几种思路。" class="headerlink" title="字符串翻转还是比较好实现的，不过还是要多几种思路。"></a>字符串翻转还是比较好实现的，不过还是要多几种思路。</h3><p>1、利用charAt，从尾部遍历，再逐个拼接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>let i <span class="token operator">=</span> str.lenght - <span class="token number">1</span> <span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">;</span>i--<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> str.charAt<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">return</span> result<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、利用数组reverse。<br><code> str.split(&#39;&#39;).reverse().join(&quot;&quot;)</code></p><p>3、利用栈实现<br>栈先进后出、将元素压入栈内，再输出，即可实现翻转。<br>可以利用数组模拟栈。</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js基础 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试问题整理</title>
      <link href="2021/03/26/view/"/>
      <url>2021/03/26/view/</url>
      
        <content type="html"><![CDATA[<h1 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h1><p>面试觉得自己实在太<em>垃圾</em>了，就来整理一下面试常问问题，做人还是要 <strong>多总结</strong>。</p><hr><h1 id="数据基本类型和引用类型"><a href="#数据基本类型和引用类型" class="headerlink" title="数据基本类型和引用类型"></a>数据基本类型和引用类型</h1><p>基本类型：undefined;null;string;number;boolean。<br>引用类型：基本类型之外的。<br>参见：<a href="https://www.jb51.net/article/65911.htm">链接</a></p><p><img src="/img/type1.png" alt="基本类型"><br><img src="/img/type2.png" alt="引用类型"></p><h1 id="BFC相关"><a href="#BFC相关" class="headerlink" title="BFC相关"></a>BFC相关</h1><h3 id="Box：css布局的基本单位"><a href="#Box：css布局的基本单位" class="headerlink" title="Box：css布局的基本单位"></a>Box：css布局的基本单位</h3><p>Box 是 CSS 布局的对象和基本单位， 直观点来说，就是一个页面是由很多个 Box 组成的。元素的类型和 display 属性，决定了这个 Box 的类型。不同类型的Box，会参与不同的 Formatting Context（一个决定如何渲染文档的容器），因此Box内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p><ul><li>block-level box：display属性为block，list-item，table的元素，会生成block-level box。并且参与blocking formatting context；</li><li>inline-level box：display属性为inline，inline-block,inline-table的元素，会生成inline-level box。并且参与inline formatting context。</li><li>run-in box:css3新属性；run-in属性与inline-block区别：run-in表现为block元素还是inline元素与后面的元素完全相反，与前面元素display无关；而inline-block则与前一个元素相反。支持的浏览器并不多。</li></ul><h3 id="Formatting-Context"><a href="#Formatting-Context" class="headerlink" title="Formatting Context"></a>Formatting Context</h3><p>formatting context 是 w3c css2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了元素将如何定位，以及和其他元素的关系和相互作用。最常见的是Formatting context有Block formatting context（简称BFC）和inline formatting context（简称IFC）</p><h3 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h3><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。</li><li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也是如此。</li><li>计算BFC的高度时，浮动元素也会参与。</li></ul><h3 id="如何创建BFC（下列条件满足一个即可生成BFC）"><a href="#如何创建BFC（下列条件满足一个即可生成BFC）" class="headerlink" title="如何创建BFC（下列条件满足一个即可生成BFC）"></a>如何创建BFC（下列条件满足一个即可生成BFC）</h3><ul><li>float的值不是none；</li><li>position的值不是static或者relative；</li><li>display的值为inline-block、table-cell、flex、table-caption或者inline-flex；</li><li>overflow的值不是visible。</li><li><h3 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h3>1、利用BFC避免margin重叠<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>*<span class="token punctuation">&#123;</span>        margin: <span class="token number">0</span><span class="token punctuation">;</span>        padding: <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token punctuation">&#123;</span>        color: <span class="token comment">#f55;</span>        background: yellow<span class="token punctuation">;</span>        width: 200px<span class="token punctuation">;</span>        line-height: 100px<span class="token punctuation">;</span>        text-align:center<span class="token punctuation">;</span>        margin: 30px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>看看我的 margin是多少<span class="token operator">&lt;</span>/p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>看看我的 margin是多少<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这两个p属于同一个BFC所以会发生margin重叠，所以想避免margin重叠可以设置它们分属于不同BFC。可以把第二个p用div包裹起来，激活这个div使之成为BFC。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>div <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"overflow:hidden;"</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>看看我的 margin是多少<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、自适应两栏布局<br>根据：</p><ul><li>每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style<span class="token operator">></span>    *<span class="token punctuation">&#123;</span>        margin: <span class="token number">0</span><span class="token punctuation">;</span>        padding: <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    body <span class="token punctuation">&#123;</span>        width: <span class="token number">100</span>%<span class="token punctuation">;</span>        position: relative<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     .left <span class="token punctuation">&#123;</span>        width: 100px<span class="token punctuation">;</span>        height: 150px<span class="token punctuation">;</span>        float: left<span class="token punctuation">;</span>        background: rgb<span class="token punctuation">(</span><span class="token number">139</span>, <span class="token number">214</span>, <span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text-align: center<span class="token punctuation">;</span>        line-height: 150px<span class="token punctuation">;</span>        font-size: 20px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     .right <span class="token punctuation">&#123;</span>        height: 300px<span class="token punctuation">;</span>        background: rgb<span class="token punctuation">(</span><span class="token number">170</span>, <span class="token number">54</span>, <span class="token number">236</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        text-align: center<span class="token punctuation">;</span>        line-height: 300px<span class="token punctuation">;</span>        font-size: 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>LEFT<span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>RIGHT<span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再根据：<strong>BFC的区域不会与float box重叠</strong><br>我们让right单独成为一个BFC，给right加上<code>overflow:hidden;</code>；注意不要设置width；<br>这时right会自动适应宽度，形成两栏自适应布局。<br>如果是三栏自适应布局，则加一个div（float设置为right），注意要写在right前面，先于right渲染占位置。<br><em>注：</em> 设置高度充满屏幕的方法：</p><ul><li>设置html、body、div的height为100%；</li><li>设置div高度为100%，position为absolute；（float失效）</li><li>设置div高度100vh；    </li></ul><p>3、清除浮动<br>如果父节点不设定高度，子节点设置浮动的时候，会发生高度塌陷，这时可利用BFC清除浮动。<br>原理：<br>计算BFC的高度时，浮动元素也参与计算。（注意是给父节点激活BFC）</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
            <tag> 面试 </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（六）</title>
      <link href="2021/03/22/js-reading6/"/>
      <url>2021/03/22/js-reading6/</url>
      
        <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h3 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h3><p>只能操作一个值的操作符叫做<strong>一元操作符</strong>。</p><p>1、递增、递减</p><blockquote><p>前置操作符，先递增、递减，再计算。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> var num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> var num3 <span class="token operator">=</span> --num1 + num2<span class="token punctuation">;</span> // 先--再求和 <span class="token number">21</span> var num4 <span class="token operator">=</span> num1 + num2<span class="token punctuation">;</span> // num1已经减过了  <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后置操作符，先计算，再递增、递减</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> var num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> var num3 <span class="token operator">=</span> num1-- + num2<span class="token punctuation">;</span> //  先求和 再--  <span class="token number">22</span> var num4 <span class="token operator">=</span> num1 + num2<span class="token punctuation">;</span> //  num1已经减过了  <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、一元操作符主要用于基本的算数运算，也可以用于转化数据类型。</p><h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><p>32位二进制，第32位表示正负数，0为正，1为负。<br>求负数二进制：求绝对值，取反码，反码+1.</p><p>1、按位非(NOT)</p><p>用<code>~</code>表示,即取反码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> // 二进制 00000000000000000000000000011001 var num2 <span class="token operator">=</span> ~num1<span class="token punctuation">;</span> // 二进制 <span class="token number">11111111111111111111111111100110</span> alert<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> // -26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、按位与(AND)</p><p>用<code>&amp;</code>表示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span> alert<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> //1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>计算时转化为二进制。对齐，与操作，只有最后一位相同，为1，所以结果为1.</p><p>3、按位或(OR)</p><p>用<code>|</code>表示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var result <span class="token operator">=</span> <span class="token number">25</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span> alert<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> //27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>计算时转化为二进制。对齐，或操作。</p><p>2、按位异或(XOR)</p><p>用<code>^</code>表示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var result <span class="token operator">=</span> <span class="token number">25</span> ^ <span class="token number">3</span><span class="token punctuation">;</span> alert<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> //26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>计算时转化为二进制。对齐，异或操作。（相同为0，不同为1）</p><h3 id="布尔操作符"><a href="#布尔操作符" class="headerlink" title="布尔操作符"></a>布尔操作符</h3><p>1、逻辑非(!)</p><pre><code>!!=Boolean();</code></pre><p>2、逻辑与(&amp;&amp;)</p><p>可以应用于任何类型的操作数，不仅仅是布尔值。有以下规则：</p><ul><li>如果第一个操作数为对象，则返回第二个操作数。（两个都为对象也一样返回第二个）</li><li>如果第二个操作数是对象，则只有在第一个操作数求值结果为true的情况下才会返回该对象。</li><li>对于null\NaN\undefined，只要有一个操作数为这些值，则返回这些值。</li><li>逻辑与操作属于短路操作，即如果第一个操作数能够决定结果（值为false），就不会再对第二个操作数求值。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> var result <span class="token operator">=</span> <span class="token punctuation">(</span>found <span class="token operator">&amp;&amp;</span> someUndefinedVariable<span class="token punctuation">)</span><span class="token punctuation">;</span> // 这里会发生错误alert<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> // 这一行不会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>但如果将found值改为false，alert就会执行。因为不会对第二个操作数再进行求值了。</li></ul><p>3、逻辑或(||)</p><ul><li>如果第一个操作数是对象，则返回第一个操作数（两个对象同）</li><li>如果第一个操作数false，则返回第二个操作数</li><li>如果同时为null\NaN\undefined,则返回这些值。</li><li>逻辑或也是短路操作，第一个为true，就不会对第二个求值了。</li></ul><p><strong>可以利用逻辑或来避免为变量赋null/undefined</strong>例如：<br>    var myObject = preferredObject || backupObject;<br>第一个值为null，则赋第二个值。</p><h3 id="乘性操作符"><a href="#乘性操作符" class="headerlink" title="乘性操作符"></a>乘性操作符</h3>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 操作符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（五）</title>
      <link href="2021/03/22/js-reading5/"/>
      <url>2021/03/22/js-reading5/</url>
      
        <content type="html"><![CDATA[<p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>ECMAScript中的对象其实就是一组数据和功能的集合。<br><strong>一个重要思想</strong>：在ECMAScript中，Object类型是所有它的实例的基础。换句话说，Object类型所具有的任何属性和方法也同样存在于更具体的对象中。<br>Object的每个实例都具有下列属性和方法。  </p><ul><li> <em>constructor:</em> 保存着用于创建当前对象的函数。对于<code>var o = new Object();</code>而言，构造函数(constructor)就是Object()。</li><li> <em>hasOwnProperty(propertyName):</em> 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(<em>propertyName</em>)必须以字符串形式指定,例如：<br><code>o.hasOwnProperty(&quot;name&quot;)</code>。</li><li><em>isPrototypeOf(object):</em> 用于检查传入的对象是否是传入对象的原型。</li><li><em>propertyIsEnumerable(propertyName):</em> 用于检查给定的属性是否能够使用for-in语句来枚举。与*hasOwnProperty()*方法一样，作为参数的属性名必须以字符串形式指定。</li><li><em>toLocaleString():</em> 返回对象的字符串表示，该字符串与执行环境的地区对应。</li><li><em>toString():</em> 返回对象的字符串表示。</li><li><em>valueOf():</em> 返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css百分比参照</title>
      <link href="2021/03/21/csspercentagereference/"/>
      <url>2021/03/21/csspercentagereference/</url>
      
        <content type="html"><![CDATA[<p>参照父元素宽度的元素属性：  </p><ul><li>padding</li><li>margin</li><li>width</li><li>text-indent(首行缩进)</li></ul><p>参照父元素高度的元素属性： height</p><p>参照父元素属性：font-size  line-height</p><p>特殊：相对定位时，top(bottom)  left(right)参照的是父元素内容区域的高度与宽度；而绝对定位时参照的是最近的定位元素包含padding的高度与宽度。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动的方法</title>
      <link href="2021/03/21/clear/"/>
      <url>2021/03/21/clear/</url>
      
        <content type="html"><![CDATA[<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>浮动会使当前标签产生向上浮的效果，同时会影响到前后标签、父级标签的位置及 width height 属性。这个规则只能影响使用清除的元素本身，不能影响其他元素。</p><ol><li>在css中给父级元素添加属性: <code>overflow:hidden/auto</code>;<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span> .div1<span class="token punctuation">&#123;</span>background:<span class="token comment">#000080;</span>border:1px solid red<span class="token punctuation">;</span>/*解决代码*/width:98%<span class="token punctuation">;</span>overflow:hidden<span class="token punctuation">&#125;</span> .div2<span class="token punctuation">&#123;</span>background:<span class="token comment">#800080;</span>border:1px solid red<span class="token punctuation">;</span>height:100px<span class="token punctuation">;</span>margin-top:10px<span class="token punctuation">;</span>width:98%<span class="token punctuation">&#125;</span> .left<span class="token punctuation">&#123;</span>float:left<span class="token punctuation">;</span>width:20%<span class="token punctuation">;</span>height:200px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>.right<span class="token punctuation">&#123;</span>float:right<span class="token punctuation">;</span>width:30%<span class="token punctuation">;</span>height:80px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span><span class="token operator">&lt;</span>/style<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>Left<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>Right<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span> div2 <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>原理：必须定义width或zoom:1（ie6），同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度 </p><p>优点：简单、代码少、浏览器支持好 </p><p>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。 </p><p>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。 </p><ol start="2"><li>伪元素清除法;(:after和zoom)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span> .div1<span class="token punctuation">&#123;</span>background:<span class="token comment">#000080;border:1px solid red;&#125; </span>.div2<span class="token punctuation">&#123;</span>background:<span class="token comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125; </span>.left<span class="token punctuation">&#123;</span>float:left<span class="token punctuation">;</span>width:20%<span class="token punctuation">;</span>height:200px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>.right<span class="token punctuation">&#123;</span>float:right<span class="token punctuation">;</span>width:30%<span class="token punctuation">;</span>height:80px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>/*清除浮动代码*/ .clearfloat:after<span class="token punctuation">&#123;</span>display:block<span class="token punctuation">;</span>clear:both<span class="token punctuation">;</span>content:<span class="token string">""</span><span class="token punctuation">;</span>visibility:hidden<span class="token punctuation">;</span>height:0<span class="token punctuation">&#125;</span> .clearfloat<span class="token punctuation">&#123;</span>/*触发hasLayout 兼容性问题*/zoom:1<span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/style<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div1 clearfloat"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>Left<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>Right<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span> div2 <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题 </p><p>优点：浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等） </p><p>缺点：代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持。 </p><p>建议：推荐使用，建议定义公共类，以减少CSS代码。 </p><ol start="3"><li>建立空的div，命名为clear，在css中添加<code>clear:both</code>;<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span> .div1<span class="token punctuation">&#123;</span>background:<span class="token comment">#000080;border:1px solid red&#125; </span>.div2<span class="token punctuation">&#123;</span>background:<span class="token comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125; </span>.left<span class="token punctuation">&#123;</span>float:left<span class="token punctuation">;</span>width:20%<span class="token punctuation">;</span>height:200px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>.right<span class="token punctuation">&#123;</span>float:right<span class="token punctuation">;</span>width:30%<span class="token punctuation">;</span>height:80px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>/*清除浮动代码*/ .clearfloat<span class="token punctuation">&#123;</span>clear:both<span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/style<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>Left<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>Right<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"clearfloat"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span> div2 <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度 </p><p>优点：简单、代码少、浏览器支持好、不容易出现怪问题 </p><p>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不好 </p><p>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法 </p><ol start="4"><li>父级div定义height<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>style <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span> .div1<span class="token punctuation">&#123;</span>background:<span class="token comment">#000080;border:1px solid red;/*解决代码*/height:200px;&#125; </span>.div2<span class="token punctuation">&#123;</span>background:<span class="token comment">#800080;border:1px solid red;height:100px;margin-top:10px&#125; </span>.left<span class="token punctuation">&#123;</span>float:left<span class="token punctuation">;</span>width:20%<span class="token punctuation">;</span>height:200px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span>.right<span class="token punctuation">&#123;</span>float:right<span class="token punctuation">;</span>width:30%<span class="token punctuation">;</span>height:80px<span class="token punctuation">;</span>background:<span class="token comment">#DDD&#125; </span><span class="token operator">&lt;</span>/style<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"left"</span><span class="token operator">></span>Left<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span>Right<span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span> div2 <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。 </p><p>优点：简单、代码少、容易掌握 </p><p>缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题 </p><p>建议：不推荐使用，只建议高度固定的布局时使用 </p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 浮动 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（四）</title>
      <link href="2021/03/21/js-reading4/"/>
      <url>2021/03/21/js-reading4/</url>
      
        <content type="html"><![CDATA[<p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>流控制语句会自动执行相应的Boolean转换**即调用Boolean()**，如if语句。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var message <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  alert<span class="token punctuation">(</span><span class="token string">"Value is true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以下为转换规则：</p><table><thead><tr><th align="center">数据类型</th><th align="center">转化为true的值</th><th align="center">转化为false的值</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">String</td><td align="center">任何非空字符串</td><td align="center">“”(空字符串)</td></tr><tr><td align="center">Number</td><td align="center">任何非零数字(包括无穷大)</td><td align="center">0和NaN</td></tr><tr><td align="center">Object</td><td align="center">任何对象</td><td align="center">null</td></tr><tr><td align="center">Undefined</td><td align="center">not applicable</td><td align="center">undefined</td></tr></tbody></table><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>整数和浮点都是Number   </li><li>八进制第一位必须为0，第二位为（0-7），否则就会当作十进制数来解析。<br><code>var octalNum1 = 079;  //解析为79</code><br><code>var octalNum2 = 08;  //解析为8</code></li><li>六进制前两位必须为x,后跟任意十六进制数（0-9及A-F）不区分大小写。</li><li>进行算术计算时，以八进制和十六进制表示的数值最终都会转成十进制。</li><li>浮点数的最高精度为17位小数，由于舍入误差、无法测试特定的浮点数值。例如<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0.1</span>,b<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">;</span>a+b<span class="token operator">==</span><span class="token number">0.3</span><span class="token punctuation">;</span> //false  注意<span class="token operator">==</span>和<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>详见<a href="https://blog.csdn.net/weixin_44591840/article/details/93966720">这个链接</a></li></ul><h5 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h5><ul><li>非数值（Not a Number）是一个特殊的数值，任何设计NaN的操作都会返回NaN，如NaN/10.</li><li>NaN与任何值都不相等，包括它本身。<br>‘alert(NaN == NaN); //false’</li><li>0/0结果是NaN，正数/0返回Infinity，负数/0返回-Infinity<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-1/0<span class="token punctuation">;</span> //-infinityisFineite<span class="token punctuation">(</span>-1/0<span class="token punctuation">)</span><span class="token punctuation">;</span>//false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="isNaN-函数"><a href="#isNaN-函数" class="headerlink" title="isNaN()函数"></a>isNaN()函数</h5><ul><li>可确定该函数是否”不是数值”</li><li>isNaN()在接收到一个值时，会尝试将它转化为数值。某些不是数值的值会直接转化为数值，例如字符串’10’或boolean值。任何不能转化为数值的值都会导致这个函数返回true。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alert<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span>NaN<span class="token punctuation">))</span><span class="token punctuation">;</span> //true alert<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //false <span class="token punctuation">(</span><span class="token number">10</span>是一个数值<span class="token punctuation">)</span>alert<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //false （可以被转化成数值10）alert<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //true （不能转化成数值）alert<span class="token punctuation">(</span>isNaN<span class="token punctuation">(</span>true<span class="token punctuation">))</span><span class="token punctuation">;</span> //false（可以被转化成数值1）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>isNaN()函数也适用于对象。这种情况下，会先调用对象的valueOf()方法，然后确认该方法的返回值是否可以转化为数值，如果不能，则基于这个返回值再调用toString方法，再测试返回值。而这个过程也是ES中内置函数和操作符的一般执行流程。</li></ul><h5 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h5><p>包括Number()用于各种类型,parseInt()和parseFloat()专门用来把字符串转化成数值。</p><p><strong>Number()</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //NaNvar num2 <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //0 var num3 <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">"000011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //11 var num4 <span class="token operator">=</span> Number<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span> //1var num5 <span class="token operator">=</span> Number<span class="token punctuation">(</span><span class="token string">"0xf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>parseInt()</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"1234blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">1234</span>   var num2 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // NaN 第一个字符不是字符或负号，就返回NaNvar num3 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"0xA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">10</span>（十六进制）var num4 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token number">22.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">22</span> var num5 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"070"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">56</span>（八进制）var num6 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"70"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">70</span>（十进制）var num7 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"0xf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">15</span>（十六进制）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了消除在解析数据的时候进制错误，如070被当成十进制（ES5），可指定第二个参数（基数）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"10"</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //2   var num2 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"10"</span>, <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //8   var num3 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"10"</span>, <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //10    var num4 <span class="token operator">=</span> parseInt<span class="token punctuation">(</span><span class="token string">"10"</span>, <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //16 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>parseFloat()</strong><br>只解析十进制数。会忽略前导的0，任何16进制数都会被解析为0。可以解析到一个小数点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var num1 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"1234blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //1234var num2 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"0xA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //0 var num3 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"22.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //22.5 var num4 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"22.34.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //22.34 var num5 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"0908.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //908.5 var num6 <span class="token operator">=</span> parseFloat<span class="token punctuation">(</span><span class="token string">"3.125e7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //31250000​<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（三）</title>
      <link href="2021/03/20/js-reading3/"/>
      <url>2021/03/20/js-reading3/</url>
      
        <content type="html"><![CDATA[<p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h3><ul><li>区分大小写   </li><li>命名规范：第一个字符为字母、下划线、或$</li><li>不同语句之间打分号，变量可以同时定义多个，用’,’隔开<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> var <span class="token function">sum</span> <span class="token operator">=</span> a + b<span class="token punctuation">;</span>var <span class="token function">diff</span> <span class="token operator">=</span> a - b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> var a <span class="token operator">=</span> <span class="token number">1</span>,b <span class="token operator">=</span> <span class="token number">2</span>,c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><ul><li>五种基本/简单数据类型：Undefined、Null、Boolean、Number、String</li><li>一种复杂数据类型：Object</li><li>ES6新引入数据类型：Symbol</li></ul><p>(1)<strong>typeof操作符</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var a <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>typeof a<span class="token punctuation">;</span>// <span class="token string">"string"</span>typeof <span class="token punctuation">(</span>typeof<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//<span class="token string">"string"</span> typeof 总是返回一个字符串var b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>typeof b<span class="token punctuation">;</span>// <span class="token string">"number"</span>typeof NAN<span class="token punctuation">;</span>//<span class="token string">"number"</span>  尽管它是<span class="token string">"Not-A-Number"</span> <span class="token punctuation">(</span>非数值<span class="token punctuation">)</span> 的缩写。var c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>typeof c<span class="token punctuation">;</span>// <span class="token string">"boolean"</span>var f <span class="token operator">=</span> undefined<span class="token punctuation">;</span>typeof f<span class="token punctuation">;</span>// <span class="token string">"undefined"</span>typeof undefined<span class="token punctuation">;</span>//<span class="token string">"undefined"</span>var g<span class="token punctuation">;</span>typeof g<span class="token punctuation">;</span>// <span class="token string">"undefined"</span>typeof x<span class="token punctuation">;</span>// <span class="token string">"undefined"</span>// Symbolstypeof Symbol<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'symbol'</span><span class="token punctuation">;</span>typeof Symbol<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'symbol'</span><span class="token punctuation">;</span>typeof Symbol.iterator <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'symbol'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) <strong>typeof null</strong><br>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，typeof null 也因此返回 “object”。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">typeof null <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">;</span>  //JavaScript诞生以来便是如此。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3)<strong>语法中的括号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var iData <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>typeof iData + <span class="token string">' Wisen'</span><span class="token punctuation">;</span> // <span class="token string">'number Wisen'</span>typeof <span class="token punctuation">(</span>iData + <span class="token string">' Wisen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token string">'string'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(4)<strong>错误与例外</strong>（占个坑 看完ES6回头再来看）<br>在 ECMAScript 2015 之前，typeof 总能保证对任何所给的操作数返回一个字符串。即便是没有声明的标识符，typeof 也能返回 ‘undefined’。使用 typeof 永远不会抛出错误。<br>但在加入了块级作用域的 let 和 const 之后，在其被声明之前对块中的 let 和 const 变量使用 typeof 会抛出一个 ReferenceError。块作用域变量在块的头部处于“暂存死区”，直至其被初始化，在这期间，访问变量将会引发错误。</p><p>另外存在一个例外：在 Web 领域中被归类为对原 ECMA JavaScript 标准的“故意侵犯”。（据说已废弃）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">typeof document.all <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'undefined'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var message<span class="token punctuation">;</span> // 这个变量声明后默认取得undefined值// var age； //这个变量未定义alert<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token string">"undefined"</span> alert<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> //<span class="token string">"错误"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="undefined与mull"><a href="#undefined与mull" class="headerlink" title="undefined与mull"></a>undefined与mull</h4><p>在JavaScript中，将一个变量赋值为undefined或null，老实说，几乎没区别。undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>undefined<span class="token punctuation">)</span>     console.log<span class="token punctuation">(</span><span class="token string">'undefined is false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// undefined is <span class="token boolean">false</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>null<span class="token punctuation">)</span>     console.log<span class="token punctuation">(</span><span class="token string">'null is false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// null is <span class="token boolean">false</span>undefined <span class="token operator">==</span> null// <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最初设计时：null是表示一个无的对象，转为数值时为0；undefined是一个表示无的原始值，转为数值时为NaN。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Number<span class="token punctuation">(</span>null<span class="token punctuation">)</span>// <span class="token number">0</span><span class="token number">5</span> + null// <span class="token number">5</span>Number<span class="token punctuation">(</span>undefined<span class="token punctuation">)</span>// NaN<span class="token number">5</span> + undefined// NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="目前的用法"><a href="#目前的用法" class="headerlink" title="目前的用法"></a>目前的用法</h5><p>但是，上面这样的区分，在实践中很快就被证明不可行。目前，null和undefined基本是同义的，只有一些细微的差别。</p><p><strong>null表示”没有对象”，即该处不应该有值</strong>。典型用法是：</p><ul><li><p>作为函数的参数，表示该函数的参数不是对象。</p></li><li><p>作为对象原型链的终点。<br><code>Object.getPrototypeOf(Object.prototype) //null</code></p></li></ul><p><strong>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</strong>典型用法是：</p><ul><li><p>变量被声明了，但没有赋值时，就等于undefined。</p></li><li><p>调用函数时，应该提供的参数没有提供，该参数等于undefined。</p></li><li><p>对象没有赋值的属性，该属性的值为undefined。</p></li><li><p>函数没有返回值时，默认返回undefined。</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">var i<span class="token punctuation">;</span>i // undefined<span class="token keyword">function</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console.log<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span> // undefinedvar  o <span class="token operator">=</span> new Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o.p // undefinedvar x <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x // undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（二）</title>
      <link href="2021/03/19/js-reading2/"/>
      <url>2021/03/19/js-reading2/</url>
      
        <content type="html"><![CDATA[<p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h1 id="在html中使用JavaScript"><a href="#在html中使用JavaScript" class="headerlink" title="在html中使用JavaScript"></a>在html中使用JavaScript</h1><h3 id="Script元素"><a href="#Script元素" class="headerlink" title="Script元素"></a>Script元素</h3><h4 id="1-转义"><a href="#1-转义" class="headerlink" title="1. 转义"></a>1. 转义</h4><p>不要在代码任何地方出现”&lt;/script&gt;”字符串，如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>script <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function-name function">sayScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> alert<span class="token punctuation">(</span><span class="token string">"&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为按照解析嵌入式代码的规则，当浏览器遇到字符串”&lt;/script&gt;”时，就会认为那是结束的”&lt;/script&gt;”标签。通过转义字符”\“可以解决这个问题。（markdown也一样）。<br>像这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>script <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function-name function">sayScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> alert<span class="token punctuation">(</span><span class="token string">"&lt;\/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span>/script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写代码浏览器可以接受，就不会出错了。</p><h4 id="2-异步操作"><a href="#2-异步操作" class="headerlink" title="2. 异步操作"></a>2. 异步操作</h4><p>解析嵌入式JavaScript代码和外部JavaScript文件（包括下载该文件）时，页面的处理也会暂时停止。<br>(1) 没有defer或async属性，浏览器会立即下载并执行相应的脚本，并且在下载和执行时页面的处理会停止。<br>(2) 有了defer属性，浏览器会立即下载相应的脚本，在下载的过程中页面的处理不会停止，等到文档解析完成后脚本才会执行。<br>(3) 有了async属性，浏览器会立即下载相应的脚本，在下载的过程中页面的处理不会停止，下载完成后立即执行，执行过程中页面处理会停止。<br>(4) 同时设置async和defer，则会遵从async而忽略defer属性。注：async、defer属性只适用于外部脚本文件。<br>(5) defer是”渲染完再执行”，async是”下载完就执行”。另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载；而多个async脚本是不能保证加载顺序的,而是谁先下载完就执行谁，执行过程中页面处理会停止，但是其他脚本的下载不会停止。<br><img src="../img/async.png" alt="异步执行"><br>其中蓝色代表js脚本网络下载时间，红色代表js脚本执行，绿色代表html解析。</p><p><strong>将脚本放在&lt;/body&gt;前面就可以了，如果有依赖的则按照顺序放好。如果一定要放在head标签里面，最好是加defer属性。</strong></p><h4 id="3-文档模式"><a href="#3-文档模式" class="headerlink" title="3. 文档模式"></a>3. 文档模式</h4><p>文档类型（doctype）的切换可以实现不同的文档模式：混杂模式和标准模式。在文档开始处没有发现文档类型声明，则所有浏览器都会默认开启混杂模式。<br>​</p>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读书笔记系列（一）</title>
      <link href="2021/03/18/js-reading1/"/>
      <url>2021/03/18/js-reading1/</url>
      
        <content type="html"><![CDATA[<p>面试觉得自己实在太<em>垃圾</em>了，就来看看基础，做人还是要 <strong>多读书</strong>。</p><hr><h2 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h2><p>完整的javascript由以下三部分实现：</p><ul><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul><h3 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1. ECMAScript"></a>1. ECMAScript</h3><ul><li>其实是脚本语言的标准化规范，可以理解为js的一个标准，但实际上js是ECMAScript标准的实现和扩展。</li><li>由ECMA-262定义，<strong>提供核心语言功能</strong>。</li></ul><h3 id="2-文档对象模型（DOM）"><a href="#2-文档对象模型（DOM）" class="headerlink" title="2.文档对象模型（DOM）"></a>2.文档对象模型（DOM）</h3><ul><li><p><strong>提供访问和操作网页内容的方法和接口</strong>。  </p></li><li><p>DOM是针对XML但经过拓展用于HTML的应用程序编程接口（API,Application Programming Interface），它把整个界面映射为一个多层节点结构。即创建了一个树形图。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span>   <span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>title<span class="token operator">></span>Sample Page<span class="token operator">&lt;</span>/title<span class="token operator">></span> <span class="token operator">&lt;</span>/head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Hello World<span class="token operator">!</span><span class="token operator">&lt;</span>/p<span class="token operator">></span> <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><em><strong>树状结构：</strong></em><br>html-head-title-Sample Page<br>    -body-p-Hello World!</p><h5 id="2-1-DOM级别"><a href="#2-1-DOM级别" class="headerlink" title="2.1 DOM级别"></a>2.1 DOM级别</h5><ul><li>DOM1：（目标主要是映射文档结构）<br>1、 DOM核心：规定了如何映射基于XML的文档结构<br>2、 DOM HTML：在DOM核心基础上进行拓展，添加了针对HTML的对象和方法  </li><li>DOM2:<br>1、 DOM视图（Views）：定义了追踪不同文档（应用css之前和之后的文档）视图的接口<br>2、 DOM事件（Events）：定义了事件和事件处理的接口<br>3、 DOM样式（Style）：定义了基于CSS为元素样式的接口<br>4、 DOM遍历和范围（Traversal and Range）：定义了遍历和操作文档树的接口</li><li>DOM3:<br>1、 DOM加载和保存模块：引入以统一方式加载和保存文件的方法<br>2、 DOM验证模块：新增验证文档的方法<br>3、 扩展DOM核心：支持XML1.0规范</li></ul><h3 id="浏览器对象模型（BOM）"><a href="#浏览器对象模型（BOM）" class="headerlink" title="浏览器对象模型（BOM）"></a>浏览器对象模型（BOM）</h3><ul><li><p><strong>提供与浏览器交互的方法与接口</strong>  </p></li><li><p>根本上讲，BOM只处理浏览器窗口和框架。人们习惯上把所有针对浏览器的js扩展算作BOM的一部分。如：  </p><ul><li>弹出、移动、缩放、关闭浏览窗口的功能；</li><li>navigator对象：提供浏览器详细信息；</li><li>location对象：提供浏览器所加载页面的详细信息；</li><li>screen对象：提供用户显示器分辨率详细信息的screen对象；</li><li>对cookies的支持；</li><li>像XMLHttpRequest和IE的ActiveXObject这样的自定义对象。​</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 红宝书 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown使用</title>
      <link href="2020/03/17/newpapername/"/>
      <url>2020/03/17/newpapername/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里可以看到官方的 Markdown 语法规则文档，当然，后文我也会用自己的方式阐述这些语法的具体用法。<br>hello<a href="https://blog.csdn.net/witnessai1/article/details/52551362">语法规则地址</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">几个＃就表示几级标题 三个&#96;框起来就是代码框<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><table><thead><tr><th>name</th><th align="right">sex</th><th align="center">age</th></tr></thead><tbody><tr><td>tony</td><td align="right">男</td><td align="center">21</td></tr><tr><td>alice</td><td align="right">女</td><td align="center">22</td></tr><tr><td>lucy</td><td align="right">女</td><td align="center">23</td></tr></tbody></table><p>: 是对齐方向</p>]]></content>
      
      
      <categories>
          
          <category> 语法规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 规范 </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
